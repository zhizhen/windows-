from conans import ConanFile, tools
import os, shutil

def config_build_requirements(conan_file):
    if conan_file.settings.os == "Windows":
        conan_file.build_requires("msys2_installer/20180531@NeoX/stable")
    elif conan_file.settings.os == "Android":
        if conan_file.settings.os_build == "Windows":
            conan_file.build_requires("mingw_installer/1.0@NeoX/stable")
            conan_file.build_requires("msys2_installer/20180531@NeoX/stable")
        conan_file.build_requires("ndk/%s@NeoX/stable" % conan_file.settings.os.ndk_version)
    elif conan_file.settings.os == "Emscripten":
        if conan_file.settings.os_build == "Windows":
            conan_file.build_requires("mingw_installer/1.0@NeoX/stable")
        conan_file.build_requires("emsdk_installer/1.38.30@NeoX/stable")
    elif conan_file.settings.os == "iOS":
        pass
    elif conan_file.settings.os == "Macos":
        pass
        
def config_to_mingw_path(path):
    result = path
    result = result.replace('\\', '/')
    if path[1] == ':':
        result = "/%s%s" % (path[0].lower(), result[2:])
    return result
        
def config_get_android_toolchain(conan_file):
    ndk_dir = conan_file.deps_env_info["ndk"].ANDROID_NDK
    ndk_dir = ndk_dir.replace('\\', '/')
    mingw_ndk_dir = config_to_mingw_path(ndk_dir)
    result = {}
    if conan_file.settings.arch == "armv7":
        result["android_sysroot_abi"] = "arm"
        result["android_toolchain_name"] = "arm-linux-androideabi"
        result["android_toolchain_root"] = result["android_toolchain_name"]
        result["android_header_triple"] = "arm-linux-androideabi"
        result["android_llvm_triple"] = "armv7a-none-linux-androideabi"
        android_abi = "armeabi-v7a"
        clang_rt_arch = "arm"
    elif conan_file.settings.arch == "armv8":
        result["android_sysroot_abi"] = "arm64"
        result["android_toolchain_name"] = "aarch64-linux-android"
        result["android_toolchain_root"] = result["android_toolchain_name"]
        result["android_header_triple"] = "aarch64-linux-android"
        result["android_llvm_triple"] = "aarch64-none-linux-android"
        android_abi = "arm64-v8a"
        clang_rt_arch = "aarch64"
    elif conan_file.settings.arch == "x86":
        result["android_sysroot_abi"] = "x86"
        result["android_toolchain_name"] = "i686-linux-android"
        result["android_toolchain_root"] = "x86"
        result["android_header_triple"] = "i686-linux-android"
        result["android_llvm_triple"] = "i686-none-linux-android"
        android_abi = "x86"
        clang_rt_arch = "i686"
    elif conan_file.settings.arch == "x86_64":
        result["android_sysroot_abi"] = "x86_64"
        result["android_toolchain_name"] = "x86_64-linux-android"
        result["android_toolchain_root"] = "x86_64"
        result["android_header_triple"] = "x86_64-linux-android"
        result["android_llvm_triple"] = "x86_64-none-linux-android"
        android_abi = "x86_64"
        clang_rt_arch = "x86_64"
    else:
        raise Exception("Unsupport NDK architecture %s" %  conan_file.settings.arch)
    
    android_toolchain_root_with_version = result["android_toolchain_root"] + "-4.9"
    result["android_toolchain_root_with_version"] = android_toolchain_root_with_version
        
    android_platform_level = int(str(conan_file.settings.os.api_level).replace("android-", ""))
    if "64" in result["android_sysroot_abi"] and android_platform_level < 21:
        android_platform_level = 21    
    platform_dir = os.path.join(ndk_dir, "platforms", "android-%d" % android_platform_level)
    if not os.path.exists(platform_dir):
        raise Exception("NDK platoform %s not found" % platform_dir)

    if conan_file.settings.compiler == "clang":
        #llvm
        android_stl_prefix = "llvm-libc++"
    else:
        #wwh gcc
        android_stl_prefix = "gnu-libstdc++"
    android_linker_flags = " -Wl,--exclude-libs,libgcc.a -Wl,--exclude-libs,libatomic.a"
    android_stl_libraries = "c++"
    sysroot = mingw_ndk_dir + "/sysroot"
    android_compiler_flags = "-isystem %s/usr/include" % sysroot
    android_compiler_flags += " -isystem %s/usr/include/%s"%(sysroot, result["android_header_triple"])
    android_compiler_flags += " -D__ANDROID_API__=%d" % android_platform_level
    android_system_library_path = "%s/platforms/android-%d/arch-%s/usr/lib" % (mingw_ndk_dir, android_platform_level, result["android_sysroot_abi"])
    if conan_file.settings.arch == "x86_64":
        android_system_library_path += "64"
    android_system_root = "%s/platforms/android-%d/arch-%s" % (mingw_ndk_dir, android_platform_level, result["android_sysroot_abi"])
    #android_linker_flags += " -L%s" % android_system_library_path
    
    android_host_tag = ""
    android_toolchain_suffix = ""
    if conan_file.settings.os_build == "Linux":
        android_host_tag = "linux-x86_64"
    elif conan_file.settings.os_build == "Windows":
        android_host_tag = "windows-x86_64"
        android_toolchain_suffix = ".exe"
    elif conan_file.settings.os_build == "Macos":
        android_host_tag = "darwin-x86_64"
    
    android_gcc_toolchain = "%s/toolchains/%s/prebuilt/%s" % (mingw_ndk_dir, android_toolchain_root_with_version, android_host_tag)
    android_toolchain_prefix = "%s/bin/%s-"% (android_gcc_toolchain, result["android_toolchain_name"])
    
    android_llvm_home = "%s/toolchains/llvm/prebuilt/%s" % (mingw_ndk_dir, android_host_tag)
    android_llvm_toolchain_prefix = "%s/bin" % android_llvm_home

    if conan_file.settings.compiler == "clang":
        android_c_compiler = "%s/clang" % android_llvm_toolchain_prefix
        android_cxx_compiler = "%s/clang++" % android_llvm_toolchain_prefix
        android_asm_compiler = "%s/clang" % android_llvm_toolchain_prefix
    else:
        #wwh gcc    
        android_c_compiler = "%sgcc" % android_toolchain_prefix
        android_cxx_compiler = "%sg++" % android_toolchain_prefix
        android_asm_compiler = "%sas" % android_toolchain_prefix

    android_compiler_flags += " --target=%s" % result["android_llvm_triple"]
    android_linker_flags += " --target=%s" % result["android_llvm_triple"]
    
    android_compiler_flags += " -g -DANDROID -ffunction-sections -funwind-tables -fstack-protector-strong -no-canonical-prefixes"
    android_linker_flags += " -Wl,--build-id -Wl,--warn-shared-textrel -Wl,--fatal-warnings"
    android_linker_flags_exe = "-Wl,--gc-sections -Wl,-z,nocopyreloc"
    
    if conan_file.settings.build_type == "Debug":
        android_compiler_flags += " -O0 -fno-limit-debug-info"
    else:
        if conan_file.settings.arch == "armv7":
            android_compiler_flags += " -Os"
        else:
            android_compiler_flags += " -O2"
        android_compiler_flags += " -DNDEBUG"
    
    if result["android_sysroot_abi"] == "arm":
        android_compiler_flags += " -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16"
        android_linker_flags += " -Wl,--fix-cortex-a8 -Wl,--exclude-libs,libunwind.a"
    elif result["android_sysroot_abi"] == "x86":
        android_compiler_flags += " -mstackrealign"
    
    
    # wwh begin
    if conan_file.settings.compiler == "clang":
        # CLANG
        android_linker_flags += " -L%s/sources/cxx-stl/%s/libs/%s" % (mingw_ndk_dir, android_stl_prefix, android_abi)
        android_cxx_standard_include_directories = ["%s/sources/cxx-stl/%s/include" % (mingw_ndk_dir, android_stl_prefix), 
                                        "%s/sources/android/support/include" % mingw_ndk_dir,
                                        "%s/sources/cxx-stl/%sabi/include" % (mingw_ndk_dir, android_stl_prefix)]
        android_cxx_standard_libraries = ["%s/sources/cxx-stl/%s/libs/%s/libc++.so" % (mingw_ndk_dir, android_stl_prefix, android_abi)]
    else:
        # GCC
        android_linker_flags += " -L%s/sources/cxx-stl/%s/4.9/libs/%s" % (mingw_ndk_dir, android_stl_prefix, android_abi)
        android_cxx_standard_include_directories = ["%s/sources/cxx-stl/%s/4.9/include" % (mingw_ndk_dir, android_stl_prefix), 
                                            "%s/sources/cxx-stl/%s/4.9/libs/%s/include" % (mingw_ndk_dir, android_stl_prefix, android_abi), 
                                            "%s/sources/android/support/include" % mingw_ndk_dir]

        android_cxx_standard_libraries = ["%s/sources/cxx-stl/%s/4.9/libs/%s/libsupc++.a" % (mingw_ndk_dir, android_stl_prefix, android_abi),
                                            "%s/sources/cxx-stl/%s/4.9/libs/%s/libgnustl_static.a" % (mingw_ndk_dir, android_stl_prefix, android_abi)]
    # wwh end

    android_compiler_flags_cxx = "-std=c++11"
    
    android_pie = android_platform_level >= 16
    
    if android_pie:
        android_linker_flags_exe += " -pie -fPIE"
        
    android_compiler_flags_cxx += " -frtti -fexceptions"
    android_linker_flags+= " -Wl,--no-undefined -landroid -lc -lz -lm"
    
    if result["android_sysroot_abi"] == "arm":
        android_compiler_flags += " -mthumb -mfpu=neon"
    android_prebuilt = "%s/prebuilt/%s/bin" % (mingw_ndk_dir, android_host_tag)
    
    android_linker_flags += " -gcc-toolchain %s" % android_gcc_toolchain
    if conan_file.settings.compiler == "clang":    
        # CLANG
        android_clang_lib_path = "%s/lib64/clang/5.0/lib/linux" % android_llvm_home
        android_asan_lib = "clang_rt.ubsan_standalone-%s-android" % clang_rt_arch
        android_linker_flags += " -L%s -l%s" % (android_clang_lib_path, android_asan_lib)
     
    result["android_system_library_path"] = android_system_library_path
    result["android_c_compiler"] = android_c_compiler
    result["android_compiler_flags"] = android_compiler_flags
    result["android_linker_flags"] = android_linker_flags
    result["android_cxx_compiler"] = android_cxx_compiler
    result["android_toolchain_prefix"] = android_toolchain_prefix
    result["android_prebuilt"] = android_prebuilt
    result["android_system_root"] = android_system_root
    result["android_toolchain_suffix"] = android_toolchain_suffix
    result["android_stl_libraries"] = android_stl_libraries
    result["android_asm_compiler"] = android_asm_compiler
    result["android_cxx_standard_include_directories"] = android_cxx_standard_include_directories
    result["android_cxx_standard_libraries"] = android_cxx_standard_libraries
    result["android_host_tag"] = android_host_tag
    result["android_gcc_toolchain"] = android_gcc_toolchain
    result["android_platform_level"] = android_platform_level
    result["android_abi"] = android_abi
    result["clang_rt_arch"] = clang_rt_arch
    return result
    
def config_android_standardlone_toolchain(conan_file, toolchain_dir):
    toolchain_dir = os.path.join(conan_file.build_folder, toolchain_dir)
    if os.path.exists(toolchain_dir):
        shutil.rmtree(toolchain_dir)
    toolchain_dir = config_to_mingw_path(toolchain_dir)
    result = config_get_android_toolchain(conan_file)
    ndk_dir = config_to_mingw_path(conan_file.deps_env_info["ndk"].ANDROID_NDK)
    maker_path = ndk_dir + "/build/tools/make-standalone-toolchain.sh"
    
    #config = "--ndk-dir=%s" % ndk_dir
    #config += " --system=%s" % result["android_host_tag"]
    #config += " --llvm-version=<version>"
    config = "--toolchain=%s" % result["android_toolchain_root_with_version"]
    config += " --arch=%s" % result["android_sysroot_abi"]
    config += " --platform=android-%d" % result["android_platform_level"]
    if conan_file.settings.compiler == "clang":
        config += " --stl=libc++"
    else:
        config += " --stl=gnustl"
    config += " --install-dir=%s" % toolchain_dir
    conan_file.output.info(config)
    conan_file.run("%s %s" % (maker_path, config), win_bash = conan_file.settings.os_build == "Windows")
    cross_compile = "%s/bin/%s-" % (toolchain_dir, result["android_toolchain_name"])
    if conan_file.settings.compiler == "clang":
        result = { "CC" : "clang",
               "CROSS_COMPILE": cross_compile}
    else:
        result = { "CC" : "gcc",
               "CROSS_COMPILE": cross_compile}
    
    return result