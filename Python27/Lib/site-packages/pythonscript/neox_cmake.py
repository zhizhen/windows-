from conans import ConanFile, CMake, tools
import os, sys

def cmake_install_check(conan_file):
    try:
        from six import StringIO
        mybuf = StringIO()
        conan_file.run("cmake --version", output=mybuf)
        conan_file.output.info("Cmake is found.")
        conan_file.output.info(mybuf.getvalue())
        mybuf.close()
    except:
        conan_file.build_requires("cmake_installer/3.11.3@NeoX/stable")

def cmake_build_requirements(conan_file):
    cmake_install_check(conan_file)
    if conan_file.settings.os == "Android":
        if conan_file.settings.os_build == "Windows":
            conan_file.build_requires("mingw_installer/1.0@NeoX/stable")
        conan_file.build_requires("ndk/%s@NeoX/stable" % conan_file.settings.os.ndk_version)
    elif conan_file.settings.os == "iOS":
        conan_file.build_requires("cmakescript/1.0@NeoX/stable")
    elif conan_file.settings.os == "Emscripten":
        if conan_file.settings.os_build == "Windows":
            conan_file.build_requires("mingw_installer/1.0@NeoX/stable")
        conan_file.build_requires("emsdk_installer/1.38.30@NeoX/stable")

def cmake_build(conan_file, source_folder = None, defs = None, gen = None):
    if defs is None:
        defs = {}
    if conan_file.settings.os == "Android":
        cmake_toolchain = conan_file.deps_env_info["ndk"].ANDROID_NDK + "/build/cmake/android.toolchain.cmake"
        defs["CMAKE_TOOLCHAIN_FILE"] = cmake_toolchain
        if conan_file.settings.os_build == "Windows":
            cmake_generator = "MinGW Makefiles"
        else:
            cmake_generator = "Unix Makefiles"
        android_abi_name = "armeabi-v7a with NEON"
        if conan_file.settings.arch == "armv8":
            android_abi_name = "arm64-v8a"
        elif conan_file.settings.arch == "x86":
            android_abi_name = "x86"
        elif conan_file.settings.arch == "x86_64":
            android_abi_name = "x86_64"
        cmake = CMake(conan_file, generator=cmake_generator)
        defs["ANDROID_ABI"] = android_abi_name
        
        if conan_file.settings.compiler == "clang":
            defs["ANDROID_PLATFORM"] = conan_file.settings.os.api_level
            defs["ANDROID_STL"] = "c++_shared"
        else:
            defs["ANDROID_NATIVE_API_LEVEL"] = conan_file.settings.os.api_level
            defs["ANDROID_STL"] = "gnustl_static"
        defs["ANDROID_NDK"] = conan_file.deps_env_info["ndk"].ANDROID_NDK
    elif conan_file.settings.os == "iOS":
        cmake_toolchain = conan_file.deps_env_info["cmakescript"].NEOX_CMAKE_SCRIPT_PATH + "/ToolChain/ios.toolchain.cmake"
        defs["CMAKE_TOOLCHAIN_FILE"] = cmake_toolchain
        cmake = CMake(conan_file, generator="Xcode")
        ios_platform = "OS"
        ios_archs = "armv7 arm64"
        if conan_file.settings.arch == "x86-standard":
            ios_platform = "SIMULATOR"
            ios_archs = "i386 x86_64"
        defs["IOS_PLATFORM"] = ios_platform
        defs["IOS_ARCH"] = ios_archs
        defs["ENABLE_ARC"] = 0
        defs["ENABLE_BITCODE"] = 1
        defs["IOS_DEPLOYMENT_TARGET"] = conan_file.settings.os.version
    elif conan_file.settings.os == "Emscripten":
        cmake_toolchain = conan_file.deps_env_info["emsdk_installer"].CONAN_CMAKE_TOOLCHAIN_FILE
        if conan_file.settings.os_build == "Windows":
            cmake_generator = "MinGW Makefiles"
        else:
            cmake_generator = "Unix Makefiles"
        defs["CMAKE_TOOLCHAIN_FILE"] = cmake_toolchain
        cmake = CMake(conan_file, generator=cmake_generator)
    else:
        if conan_file.settings.os == "Macos":
            defs["CMAKE_OSX_DEPLOYMENT_TARGET"] = "10.12"
        if gen is None:
            cmake = CMake(conan_file)
        else:
            cmake = CMake(conan_file, generator = gen)
    cmake.configure(source_folder=source_folder, defs=defs)
    cmake.build()
    return cmake
